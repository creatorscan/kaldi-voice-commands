#!/bin/bash

# Written by Rodrigo Esteves baitsart@gmail.com www.youtube.com/user/baitsart 
# GNU License. You are free to modify and redistribute   # 

language="en"

if [ -z "$1" ]; then
/bin/bash ~/.voice_commands/play_stop.sh
exit
fi
if echo "$@" | grep -x -q -- "-r\|-run"; then
/bin/bash ~/.voice_commands/play_stop.sh
exit
fi
if echo "$@" | grep -q -- "-vol\|-volume"; then
microphe_port=$(sed -n '1p' ~/.voice_commands/Scripts/microphone_port | cut -d '=' -f2)
input=$(sed -n '1p' ~/.voice_commands/Scripts/input_port | cut -d '=' -f2)
command_line=$(echo "$@" | sed 's/volume/vol/g;s/vol/vol /g;s/vol=/vol /g' | sed 's/  / /g' | tr ' ' '\n' | grep -A1 -- "-vol\|-vol" | tail -n1 )
if (( "$command_line" >= 200 )); then
echo "
Error. Volume is (<= 200).
"
exit 1
fi
if echo "
Volume level at: `echo "$command_line" | grep -E -x '[0-9]*'`%" ; then
volume_mic=$(echo "$command_line" \* 100  | bc -l )
pacmd set-source-volume "$microphe_port" 0x"$volume_mic" >/tmp/result_vol_mic_config
if
grep -q "You need to specify a volume" /tmp/result_vol_mic_config; then
echo "
Error output:
`cat /tmp/result_vol_mic_config | tail -n 2 | sed 's/>>>//'

Execute:
 « v-c -mic [NUM] »	Configure the port default [1,2,3...]

And try again.
`"
fi
rm /tmp/result_vol_mic_config
exit
fi
fi
if echo "$@" | grep -q -- "-mic\|-microphone"; then
microphe_port=$(echo "$@" | sed 's/microphone/mic/g;s/mic/mic /g;s/mic=/mic /g' | sed 's/  / /g' | tr ' ' '\n' | grep -A1 -- "-mic\|-mic" | tail -n1 )
if echo "$microphe_port" | grep -E -v -x '[0-9]*' ; then
microphe_port=$(sed -n '1p' ~/.voice_commands/Scripts/microphone_port | cut -d '=' -f2)
fi
input_opt=$(echo "$@" | sed 's/microphone/mic/g;s/mic/mic /g;s/mic=/mic /g' | sed 's/  / /g' | sed 's/input- /input-/' | sed 's/input-=/input-/' | sed 's/  / /g' | tr ' ' '\n' | grep -A2 -- "-mic\|-mic" | tail -n1 )
if echo "$input_opt" | grep -q -- "input-"; then
input_opt=$(echo "$input_opt" | sed 's/input-//' )
input=$(echo ";input-microphone-"$input_opt"" )
if echo "$input_opt" | grep -E -v -x '[0-9]*' ; then
input=$(sed -n '1p' ~/.voice_commands/Scripts/input_port | cut -d '=' -f2)
fi
if [ -z "$input_opt" ] ; then
input=""
fi
fi
sh ~/.voice_commands/Scripts/micro_config.sh "$microphe_port" "$input"
exit
fi
if echo "$@" | sed 's/-lang/-l/g;s/-l/-l /g;s/-l=/-l /g' | tr ' ' '\n' | grep -x -q -- "-l"; then

lang=$(echo "$@" | sed 's/-try//g;s/-t//g;s/-update//g;s/-u//g;s/-modify//g;s/-mod//g;s/-help//g;s/-h//g;s/-run//g;s/-r//g;s/-lang//g;s/-l//' | sed 's/^[ ]*//' | awk '{print $1}')
echo "(af afrikaans), (ar arabic), (az azerbaijani), (be belarusian), (bg bulgarian), (bn bengali), (ca catalan), (cs czech), (cy welsh), (da danish), (de german), (el greek), (en english), (eo esperanto), (es spanish), (et estonian), (eu basque), (fa persian), (fi finnish), (fr french), (ga irish), (gl galician), (gu gujarati), (hi hindi), (hr croatian), (ht haitian), (hu hungarian), (hy armenian), (id indonesian), (is icelandic), (it italian), (iw hebrew), (ja japanese), (ka georgian), (km khmer), (kn kannada), (ko korean), (la latin), (lo lao), (lt lithuanian), (lv latvian), (mk macedonian), (ms malay), (mt maltese), (nl dutch), (no norwegian), (pl polish), (pt portuguese), (ro romanian), (ru russian), (sk slovak), (sl slovenian), (sq albanian), (sr serbian), (sv swedish), (sw swahili), (ta tamil), (te telugu), (th thai), (tl filipino), (tr turkish), (uk ukrainian), (ur urdu), (vi vietnamese), (yi yiddish), (zh-CN chinese)" > /tmp/lang 
language_list=$(cat /tmp/lang)

if echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g' | cut -d' ' -f2 | grep -x -q -i "$lang"; then
	opt_lang=$( echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g'  | grep -i "$lang" | awk '{print $1}')
	language=$( echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g'  | grep -i "$lang" | awk '{print $1}')
commands=$(echo "$@" | sed 's/-try//g;s/-t//g;s/-lang//g;s/-l//g;s/'"$lang"'//' | sed 's/^[ ]*//' )
fi
if echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g' | cut -d' ' -f1 | grep -x -q -i "$lang"; then
	opt_lang=$( echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g'  | grep -i "$lang " | awk '{print $1}')
	language=$( echo "$language_list" | sed 's/), (/\n/g;s/(//g;s/)//g'  | grep -i "$lang " | awk '{print $1}')
fi
if [ -z "$opt_lang" ]; then
echo "No lang option: $lang
List of language availables is:
 (language abbreviature, or language complete name)

`echo "$language_list"`"
exit 0;
fi
fi
if echo "$1" | grep -x -q -- "-r\|-run"; then
/bin/bash ~/.voice_commands/play_stop.sh "$language"
exit
fi
if echo "$1" | grep -x -q -- "-t\|-try"; then
commands=$(echo "$@" | sed 's/-try //g;s/-t //g;s/  / /g;s/-lang '"$language"'//g;s/-l '"$language"'//g;s/-lang='"$language"'//g;s/-l='"$language"'//g' | sed 's/^[ ]*//')
CMD_RETRY=$(sed -n '111p' ~/.voice_commands/"v-c LANGS"/commands-"$language" | cut -d "=" -f 2)
if echo "$commands" | grep -q "$CMD_RETRY" ; then
[[ -f /tmp/speech_recognition_prev.tmp ]] || notify-send "No previous command" "Execute it again, please"
mv /tmp/speech_recognition_prev.tmp /tmp/speech_recognition.tmp
/bin/bash ~/.voice_commands/speech_commands.sh "$language"
exit 1
fi
echo "$commands" > /tmp/speech_recognition.tmp
/bin/bash ~/.voice_commands/speech_commands.sh "$language"
exit 1
fi

if echo "$1" | grep -q -- "-m\|-mod"; then
if [[ -f ~/.voice_commands/"v-c LANGS"/README-"$language".md ]]; then
gedit ~/.voice_commands/"v-c LANGS"/README-"$language".md ~/.voice_commands/"v-c LANGS"/commands-"$language"
exit
fi
echo "
Execute:
 « v-c -update -lang "'"'""$language""'"'" »	

And try again."
exit 1
fi
if echo "$1" | grep -q -- "-u\|-update"; then
sh ~/.voice_commands/Scripts/hace_leeme.sh "$language"
exit
fi
if echo "$1" | grep -q -- "-remove\|-rem"; then
sh ~/.voice_commands/Scripts/remove_some.sh "$2"
exit
fi
if echo "$1" | grep -q -- "-l\|-lang"; then
echo "v-c -l -lang	To select another, of 67 languages, on the commands:
		 ( « -run », « -try », « -modify », « -update » and « -h » )."
exit
fi
if echo "$1" | grep -q -- "-tr\|-translate"; then
sh ~/.voice_commands/Scripts/translate_some.sh
exit
fi
if echo "$1" | grep -x -q -i -- "-h"; then
if [[ -f ~/.voice_commands/"v-c LANGS"/README-"$language".md ]]; then
cat ~/.voice_commands/"v-c LANGS"/README-"$language".md
exit
fi
echo "
Execute:
 « v-c -update -lang "'"'""$language""'"'" »	

And try again."
exit 1
fi
if echo "$1" | grep -x -q -i -- "-a\|-add"; then
text_line=$(echo "$@" | sed 's/'"$1"'//' )
sh ~/.voice_commands/Scripts/add_new.sh "$text_line"
exit
fi
if echo "$1" | grep -x -q -i -- "-v\|-version"; then
echo "# Voice commands (command your PC speaking commands) #
Version 1.0.2-5"
exit
fi
if echo "$1" | grep -x -q -i -- "--help"; then
echo "
	# Voice commands (command your PC speaking commands) #
Version 1.0.2-5
	v-c , command line options

v-c -r		Run
v-c -l -lang	To select another, of 67 languages, on the commands:
		 ( « -run », « -try », « -modify », « -update » and « -h » ).
v-c -t -try	To try any command. « v-c -try "'"'"order call method"'"'" »
v-c -mic [NUM]	Set the port, to use by default [1,2,3...]. And, if [input-"'"'"1,2,3..."'"'"].
v-c -vol	Set the microphone volume that is used by default. Level max. 200.
v-c -m -mod	To modify the commands file, and the README file.
v-c -u -update	To update the README file, after modify the script.
v-c -a -add	To add, create, a new voice command action « v-c -add »,
		 or « v-c -add "'"'"action name"'"'" »,
		 or « v-c -add "'"'"action name=one call method;another call method"'"'"
		Separating between NAME and ORDER with =. And between ORDERS, with ;
v-c -tr		Translate some new action, if you not translated yet.
v-c -remove	To remove a new action, if doesn't need it any more.
v-c -v		Print the program version.
v-c -h		Show instructions README file.
v-c --help	Show this message
"
exit
fi
echo "No command $1
Try « v-c --help », to see the available commands"

